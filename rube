#!/usr/bin/env ruby

# TODO store user data in user.yaml
# TODO break classes out into their own files, refactor, and reconsider the user interface

$GameName = 'Rube'

class Array
  def rand
    self[Kernel.rand(self.size)]
  end
  def to_list
    if self.size == 1
      self.to_s
    elsif self.size == 2
      self.join(' and ').map{|i| i.unmethodize}
    else
      clone = self.clone
      last_item = "and #{clone.pop}"
      (clone.map{|i| i.unmethodize} << last_item).join(', ')
    end
  end
end

class String
  def methodize
    self.downcase.strip.gsub(/\W+/, '_')
  end
  def unmethodize
    self.gsub('_', ' ')
  end
end

class User
  attr_reader :name
  attr_reader :abilities

  def initialize(name)
    @name, @abilities = name.strip, Array.new
  end

  def can(method)
    # TODO should be a factory that generates an object descendent of an Action class
    method = method.methodize
    instance_eval "def #{method}; puts '#{@name} #{method.unmethodize}s skillfully!'; end"
    @abilities << method
  end

  def describe
    if @abilities.empty?
      puts "You can't do anything yet!  Add some abilities by pressing (a)!"
    else
      puts "You can #{@abilities.to_list}."
    end
  end
end

def output(sleep, message=nil)
  if [Float, Fixnum].include? sleep.class
    `sleep #{sleep}`
  else
    message = sleep
  end
  puts
  puts "#{message}"
end

def intro
  output "Welcome, #{$user.name}, to #{$GameName}!"
  output 1, "...the game that lets you do anything"
  output 1.5, "...if you tell it how to do the thing (feature coming soon)!"
  output 1.5, "#{$user.name}, you can be a warlock, an overlord, or a man-god. Which do you choose?"
  gets
  output "You have decided to be a #{['wench', 'prostitute', 'drunkard', 'village idiot'].rand}. Great choice!"
  output 2, "Society gleams with pride at your lifestyle choices!"
  output 2, "Anyway, this games is about doing things, and things you will do!"
  menu(true)
end

def menu(display_options = false)
  output "...So whatcha wanna do? (press (h) for menu)"
  puts "a: add a new ability\nd: describe yourself\ne: edit your character\nh: help (this message)\nq: quit (and return to pathetic normalcy)" if display_options

  command = gets.methodize
  if $user.abilities.include? command
    $user.send(command.to_sym)
  else
    case command
      when 'a' then output("Type a verb (and optionally a direct object.), e.g. \"dance\" or \"mow lawn\""); $user.can(gets) # Change to "learn how to <action>"
      when 'd' then $user.describe
      when 'e' then # edit character
      when 'h' then menu(true)
      when 'q' then output 'Quitting for now, but you\'ll come crawling back!'; exit
      else output "#{command} is not a command or action"
    end
  end
  menu
end

############
# START
############

puts "Who goes there?!"

$user = User.new(gets) # TODO require non-emptiness

menu
#intro
